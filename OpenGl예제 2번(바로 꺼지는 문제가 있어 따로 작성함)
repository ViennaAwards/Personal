#include<gl/glut.h>
#include <iostream>


using namespace std;


GLfloat current_angle = 0.0f; //삼각형의 현재 회전 각도

void keyboard(unsigned char key, int x, int y)
{
	cout << "다음 키가 눌러졌습니다. \"" << key << "\" ASCII: " << (int)key << endl;

	//ESC 키가 눌러졌다면 프로그램 종료
	if (key == 27)
	{
		exit(0);
	}
}


void drawBitmapText(char *str, float x, float y, float z)
{
	glRasterPos3f(x, y, z); //문자열이 그려질 위치 지정

	while (*str)
	{
		//GLUT_BITMAP_TIMES_ROMAN_24 폰트를 사용하여 문자열을 그린다.
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *str);

		str++;
	}
}


void display()
{
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f); //glClear에서 컬러 버퍼 지운 후 윈도우를 채울 색을 지정, 검은색
	glClear(GL_COLOR_BUFFER_BIT); //컬러 버퍼를 지운다.

	glMatrixMode(GL_MODELVIEW); //이후 계산은 modelview matrix에 영향을 주게됨
	glLoadIdentity(); //modleview matrix를 초기화

	//z축을 중심으로 설정된 current_angle로 회전한다.
	glRotatef(current_angle, 0.0f, 0.0f, 1.0f);

	//중앙이 원점에 오도록 삼각형을 그린다. 
	glBegin(GL_TRIANGLES); //3점이 하나의 삼각형을 구성한다. 반시계 방향으로 3점의 vertex를 지정해줘야 한다.
	glColor3f(1.0f, 0.0f, 0.0f); //빨간색 지정
	glVertex3f(-0.5f, -0.5f, 0.0f);    // 왼쪽 아래 vertex
	glColor3f(0.0f, 1.0f, 0.0f); //녹색 지정
	glVertex3f(0.5f, -0.5f, 0.0f);    // 오른쪽 아래 vertex
	glColor3f(0.0f, 0.0f, 1.0f); //파란색 지정
	glVertex3f(0.0f, 0.5f, 0.0f);    // 위쪽 vertex
	glEnd();

	glColor3f(1.0f, 1.0f, 1.0f);//흰색 지정

	//display 함수 호출될때마다 회전각도 증가시킴
	current_angle += 0.5;
	cout << current_angle << endl;


	//더블 버퍼링을 하고 있다면, 프론트 버퍼와 백 버퍼 2개가 사용된다.현재 화면에 보여지는 것은 프론트 버퍼에 있는 내용이다.
	//백 버퍼는 다음 장면을 위해 렌더링을 하고 있는 곳이다.백 버퍼의 렌더링이 완료되면 두 개의 버퍼를 교환(swap)한다.
	//화면에 업데이트된 프론트 버퍼에 있는 내용이 출력된다.

	//싱글 버퍼라면 버퍼에 있는 것을 화면에 출력한다.
	glutSwapBuffers();
}


void reshape(GLsizei width, GLsizei height)
{
	if (height == 0) height = 1;                // 0으로 나누는 것 방지
	GLfloat aspect = (GLfloat)width / (GLfloat)height;

	//변경된 윈도우크기로 viewport를 설정한다.
	glViewport(0, 0, width, height);

	glMatrixMode(GL_PROJECTION);  //뒤에 오는 계산들은 Projection matrix에 영향을 주도록 설정
	glLoadIdentity();             //projection matrix 초기화
	if (width >= height) {
		// aspect >= 1 이면, height를 [-1,1]로 설정하고 width는 [-1*aspect, 1*aspect]로 설정한다.
		// left, right, top, bottom
		gluOrtho2D(-1.0 * aspect, 1.0 * aspect, -1.0, 1.0);
	}
	else {
		// aspect < 1이면, width를 [-1,1]로 설정하고 height를  [-1/aspect, 1/aspect]로 설정한다.
		gluOrtho2D(-1.0, 1.0, -1.0 / aspect, 1.0 / aspect);
	}

	//뒤에 오는 계산들은 Modelview Matrix에 영향을 주도록 설정한다. 
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity(); //Modelview matrix 초기화
}


void timer(int value) {
	glutPostRedisplay();
	glutTimerFunc(30, timer, 0);
}


int main(int argc, char* argv[])
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("OpenGL Example");


	glutDisplayFunc(display);

	glutKeyboardFunc(keyboard);

	glutReshapeFunc(reshape);
  
	glutTimerFunc(0, timer, 0);


	glutMainLoop();

	return 0;
}
